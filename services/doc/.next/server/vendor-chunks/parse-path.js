"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/parse-path";
exports.ids = ["vendor-chunks/parse-path"];
exports.modules = {

/***/ "../../../../.yarn/berry/cache/parse-path-npm-7.0.0-ceda41e594-10c0.zip/node_modules/parse-path/lib/index.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../.yarn/berry/cache/parse-path-npm-7.0.0-ceda41e594-10c0.zip/node_modules/parse-path/lib/index.js ***!
  \*******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar protocols = __webpack_require__(/*! protocols */ \"../../../../.yarn/berry/cache/protocols-npm-2.0.1-e2bc74d1c1-10c0.zip/node_modules/protocols/lib/index.js\");\n\n/**\n * parsePath\n * Parses the input url.\n *\n * @name parsePath\n * @function\n * @param {String} url The input url.\n * @return {Object} An object containing the following fields:\n *\n *    - `protocols` (Array): An array with the url protocols (usually it has one element).\n *    - `protocol` (String): The first protocol or `\"file\"`.\n *    - `port` (String): The domain port (default: `\"\"`).\n *    - `resource` (String): The url domain/hostname.\n *    - `host` (String): The url domain (including subdomain and port).\n *    - `user` (String): The authentication user (default: `\"\"`).\n *    - `password` (String): The authentication password (default: `\"\"`).\n *    - `pathname` (String): The url pathname.\n *    - `hash` (String): The url hash.\n *    - `search` (String): The url querystring value (excluding `?`).\n *    - `href` (String): The normalized input url.\n *    - `query` (Object): The url querystring, parsed as object.\n *    - `parse_failed` (Boolean): Whether the parsing failed or not.\n */\nfunction parsePath(url) {\n\n    var output = {\n        protocols: [],\n        protocol: null,\n        port: null,\n        resource: \"\",\n        host: \"\",\n        user: \"\",\n        password: \"\",\n        pathname: \"\",\n        hash: \"\",\n        search: \"\",\n        href: url,\n        query: {},\n        parse_failed: false\n    };\n\n    try {\n        var parsed = new URL(url);\n        output.protocols = protocols(parsed);\n        output.protocol = output.protocols[0];\n        output.port = parsed.port;\n        output.resource = parsed.hostname;\n        output.host = parsed.host;\n        output.user = parsed.username || \"\";\n        output.password = parsed.password || \"\";\n        output.pathname = parsed.pathname;\n        output.hash = parsed.hash.slice(1);\n        output.search = parsed.search.slice(1);\n        output.href = parsed.href;\n        output.query = Object.fromEntries(parsed.searchParams);\n    } catch (e) {\n        // TODO Maybe check if it is a valid local file path\n        //      In any case, these will be parsed by higher\n        //      level parsers such as parse-url, git-url-parse, git-up\n        output.protocols = [\"file\"];\n        output.protocol = output.protocols[0];\n        output.port = \"\";\n        output.resource = \"\";\n        output.user = \"\";\n        output.pathname = \"\";\n        output.hash = \"\";\n        output.search = \"\";\n        output.href = url;\n        output.query = {};\n        output.parse_failed = true;\n    }\n\n    return output;\n}\n\nmodule.exports = parsePath;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vLi4vLnlhcm4vYmVycnkvY2FjaGUvcGFyc2UtcGF0aC1ucG0tNy4wLjAtY2VkYTQxZTU5NC0xMGMwLnppcC9ub2RlX21vZHVsZXMvcGFyc2UtcGF0aC9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWIsZ0JBQWdCLG1CQUFPLENBQUMsNEhBQVc7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLFFBQVE7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BzdHVkeS9kb2NzLy4uLy4uLy4uLy4uLy55YXJuL2JlcnJ5L2NhY2hlL3BhcnNlLXBhdGgtbnBtLTcuMC4wLWNlZGE0MWU1OTQtMTBjMC56aXAvbm9kZV9tb2R1bGVzL3BhcnNlLXBhdGgvbGliL2luZGV4LmpzPzdhZWYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBwcm90b2NvbHMgPSByZXF1aXJlKFwicHJvdG9jb2xzXCIpO1xuXG4vKipcbiAqIHBhcnNlUGF0aFxuICogUGFyc2VzIHRoZSBpbnB1dCB1cmwuXG4gKlxuICogQG5hbWUgcGFyc2VQYXRoXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7U3RyaW5nfSB1cmwgVGhlIGlucHV0IHVybC5cbiAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGZvbGxvd2luZyBmaWVsZHM6XG4gKlxuICogICAgLSBgcHJvdG9jb2xzYCAoQXJyYXkpOiBBbiBhcnJheSB3aXRoIHRoZSB1cmwgcHJvdG9jb2xzICh1c3VhbGx5IGl0IGhhcyBvbmUgZWxlbWVudCkuXG4gKiAgICAtIGBwcm90b2NvbGAgKFN0cmluZyk6IFRoZSBmaXJzdCBwcm90b2NvbCBvciBgXCJmaWxlXCJgLlxuICogICAgLSBgcG9ydGAgKFN0cmluZyk6IFRoZSBkb21haW4gcG9ydCAoZGVmYXVsdDogYFwiXCJgKS5cbiAqICAgIC0gYHJlc291cmNlYCAoU3RyaW5nKTogVGhlIHVybCBkb21haW4vaG9zdG5hbWUuXG4gKiAgICAtIGBob3N0YCAoU3RyaW5nKTogVGhlIHVybCBkb21haW4gKGluY2x1ZGluZyBzdWJkb21haW4gYW5kIHBvcnQpLlxuICogICAgLSBgdXNlcmAgKFN0cmluZyk6IFRoZSBhdXRoZW50aWNhdGlvbiB1c2VyIChkZWZhdWx0OiBgXCJcImApLlxuICogICAgLSBgcGFzc3dvcmRgIChTdHJpbmcpOiBUaGUgYXV0aGVudGljYXRpb24gcGFzc3dvcmQgKGRlZmF1bHQ6IGBcIlwiYCkuXG4gKiAgICAtIGBwYXRobmFtZWAgKFN0cmluZyk6IFRoZSB1cmwgcGF0aG5hbWUuXG4gKiAgICAtIGBoYXNoYCAoU3RyaW5nKTogVGhlIHVybCBoYXNoLlxuICogICAgLSBgc2VhcmNoYCAoU3RyaW5nKTogVGhlIHVybCBxdWVyeXN0cmluZyB2YWx1ZSAoZXhjbHVkaW5nIGA/YCkuXG4gKiAgICAtIGBocmVmYCAoU3RyaW5nKTogVGhlIG5vcm1hbGl6ZWQgaW5wdXQgdXJsLlxuICogICAgLSBgcXVlcnlgIChPYmplY3QpOiBUaGUgdXJsIHF1ZXJ5c3RyaW5nLCBwYXJzZWQgYXMgb2JqZWN0LlxuICogICAgLSBgcGFyc2VfZmFpbGVkYCAoQm9vbGVhbik6IFdoZXRoZXIgdGhlIHBhcnNpbmcgZmFpbGVkIG9yIG5vdC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQYXRoKHVybCkge1xuXG4gICAgdmFyIG91dHB1dCA9IHtcbiAgICAgICAgcHJvdG9jb2xzOiBbXSxcbiAgICAgICAgcHJvdG9jb2w6IG51bGwsXG4gICAgICAgIHBvcnQ6IG51bGwsXG4gICAgICAgIHJlc291cmNlOiBcIlwiLFxuICAgICAgICBob3N0OiBcIlwiLFxuICAgICAgICB1c2VyOiBcIlwiLFxuICAgICAgICBwYXNzd29yZDogXCJcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiXCIsXG4gICAgICAgIGhhc2g6IFwiXCIsXG4gICAgICAgIHNlYXJjaDogXCJcIixcbiAgICAgICAgaHJlZjogdXJsLFxuICAgICAgICBxdWVyeToge30sXG4gICAgICAgIHBhcnNlX2ZhaWxlZDogZmFsc2VcbiAgICB9O1xuXG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIHBhcnNlZCA9IG5ldyBVUkwodXJsKTtcbiAgICAgICAgb3V0cHV0LnByb3RvY29scyA9IHByb3RvY29scyhwYXJzZWQpO1xuICAgICAgICBvdXRwdXQucHJvdG9jb2wgPSBvdXRwdXQucHJvdG9jb2xzWzBdO1xuICAgICAgICBvdXRwdXQucG9ydCA9IHBhcnNlZC5wb3J0O1xuICAgICAgICBvdXRwdXQucmVzb3VyY2UgPSBwYXJzZWQuaG9zdG5hbWU7XG4gICAgICAgIG91dHB1dC5ob3N0ID0gcGFyc2VkLmhvc3Q7XG4gICAgICAgIG91dHB1dC51c2VyID0gcGFyc2VkLnVzZXJuYW1lIHx8IFwiXCI7XG4gICAgICAgIG91dHB1dC5wYXNzd29yZCA9IHBhcnNlZC5wYXNzd29yZCB8fCBcIlwiO1xuICAgICAgICBvdXRwdXQucGF0aG5hbWUgPSBwYXJzZWQucGF0aG5hbWU7XG4gICAgICAgIG91dHB1dC5oYXNoID0gcGFyc2VkLmhhc2guc2xpY2UoMSk7XG4gICAgICAgIG91dHB1dC5zZWFyY2ggPSBwYXJzZWQuc2VhcmNoLnNsaWNlKDEpO1xuICAgICAgICBvdXRwdXQuaHJlZiA9IHBhcnNlZC5ocmVmO1xuICAgICAgICBvdXRwdXQucXVlcnkgPSBPYmplY3QuZnJvbUVudHJpZXMocGFyc2VkLnNlYXJjaFBhcmFtcyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBUT0RPIE1heWJlIGNoZWNrIGlmIGl0IGlzIGEgdmFsaWQgbG9jYWwgZmlsZSBwYXRoXG4gICAgICAgIC8vICAgICAgSW4gYW55IGNhc2UsIHRoZXNlIHdpbGwgYmUgcGFyc2VkIGJ5IGhpZ2hlclxuICAgICAgICAvLyAgICAgIGxldmVsIHBhcnNlcnMgc3VjaCBhcyBwYXJzZS11cmwsIGdpdC11cmwtcGFyc2UsIGdpdC11cFxuICAgICAgICBvdXRwdXQucHJvdG9jb2xzID0gW1wiZmlsZVwiXTtcbiAgICAgICAgb3V0cHV0LnByb3RvY29sID0gb3V0cHV0LnByb3RvY29sc1swXTtcbiAgICAgICAgb3V0cHV0LnBvcnQgPSBcIlwiO1xuICAgICAgICBvdXRwdXQucmVzb3VyY2UgPSBcIlwiO1xuICAgICAgICBvdXRwdXQudXNlciA9IFwiXCI7XG4gICAgICAgIG91dHB1dC5wYXRobmFtZSA9IFwiXCI7XG4gICAgICAgIG91dHB1dC5oYXNoID0gXCJcIjtcbiAgICAgICAgb3V0cHV0LnNlYXJjaCA9IFwiXCI7XG4gICAgICAgIG91dHB1dC5ocmVmID0gdXJsO1xuICAgICAgICBvdXRwdXQucXVlcnkgPSB7fTtcbiAgICAgICAgb3V0cHV0LnBhcnNlX2ZhaWxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVBhdGg7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../../../.yarn/berry/cache/parse-path-npm-7.0.0-ceda41e594-10c0.zip/node_modules/parse-path/lib/index.js\n");

/***/ })

};
;